#!/usr/bin/env ruby

# Copyright (c) 2017  Eddie Antonio Santos <easantos@ualberta.ca>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Requires Ruby 2.2

require 'fileutils'
require 'tempfile'

abort "Must provide imgcat executable" if ARGV.empty?

Imgcat = File.realpath(ARGV.first)
test_dir = File.dirname(__FILE__)

AnyImage = '1px_8_table.png'

def run_tests!
  # Compare the output of a few standard cases.
  compare_output '-d', 256, '1px_256_table.png',  '1px_256_table.out'
  compare_output '-d', 8,   '1px_8_table.png',    '1px_8_table.out'

  # Test resizing
  # TODO: this test is incorrect; should use a width smaller than the image
  imgcat '--width=72', AnyImage

  # Try erroneous invocations
  imgcat!
  imgcat! '--width=-3', AnyImage
  imgcat! '-w', 'hurrrrr', AnyImage
end


class InvocationError < StandardError
  attr_reader :invocation, :expected
  def initialize(invocation, expected=nil)
    @invocation = invocation
    @expected = expected
  end

  def has_expected?
    !@expected.nil?
  end

  def actual
    invocation.actual
  end
end

class Invocation
  attr_reader :filename, :options, :status, :actual, :stderr

  def initialize(*args)
    @filename = args.pop
    @options = args
  end

  def ran?
    !@status.nil?
  end

  def failed?
    ran? && @status != 0
  end

  def invocation
    argv.join(' ')
  end

  def argv
    args = options.map(&:to_s)
    if filename.nil?
      args
    else
      [*args, @filename]
    end
  end

  def run
    Tempfile.create('err') do |error_file|
      Tempfile.create('out') do |output_file|
        system(Imgcat, *argv, :out => output_file, :err => error_file)
        @status = $? || 0

        output_file.seek(0)
        error_file.seek(0)
        @actual = output_file.read
        @stderr = error_file.read
      end
    end

    raise InvocationError.new(self) if failed?
    self
  end
end

def imgcat(*args)
  Invocation.new(*args).run
end

def imgcat!(*args)
  cmd = Invocation.new(*args)
  begin
    cmd.run
  rescue InvocationError
    cmd
  else
    raise InvocationError.new(cmd)
  end
end

def compare_output(*options, image, expected)
  cmd = imgcat(*options, image)

  expected_contents = File.open(expected || '/dev/null') do |file|
    file.read
  end

  if expected_contents != cmd.actual
    raise InvocationError.new(cmd, expected_contents)
  end
end

def run_tests
  begin
    run_tests!
  rescue InvocationError => error
    cmd = error.invocation
    puts "Failed: #{cmd.invocation}"
    puts "Status: #{cmd.status}"
    puts "Stderr: #{cmd.stderr}"
    puts "Expected:\n#{error.expected}" if error.has_expected?
    puts "Actual:\n#{error.actual}"
    exit(-1)
  else
    puts "Tests passed!"
  end
end

FileUtils.cd(test_dir, :verbose => true) do
  run_tests
end
